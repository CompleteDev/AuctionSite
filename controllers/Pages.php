<?php	class Pages extends Controller	{		public function __construct()		{			$this->pageModel = $this->model('Page');			$this->listingModel = $this->model('ListingPage');			$this->oShared = $this->model('SharedMDL');			$this->send_messaging = $this->model('Messaging');		}		public function index()		{			if (!isset($_COOKIE['iwashere']))			{				$CookieState = "no";				setcookie("iwashere", "yes", time()+86400000);			}			else			{				$CookieState = "yes";			}			$carousel_imgs = $this->pageModel->getcarouselImgs();			$mainInfo = $this->pageModel->getMainPageInfo();			$auctioninfo = $this->pageModel->getAuctions();			$allListings = $this->pageModel->getAllListings();			$testimonials = $this->pageModel->getTestimonals();			$associates = $this->pageModel->getAsscoiates();			$commercial = $this->pageModel->getListingByTypes(commercial);			$crop = $this->pageModel->getListingByTypes(crop);			$hay = $this->pageModel->getListingByTypes(hay);			$Range = $this->pageModel->getListingByTypes(Range);			$recreational = $this->pageModel->getListingByTypes(recreational);			$live = $this->pageModel->getListingByTypes(liveAuction);			$data =                [				'carousel_imgs' => $carousel_imgs,				'main' => $mainInfo,				'allListings' => $allListings,				'auctioninfo' => $auctioninfo,				'testimonials' => $testimonials,				'associates' => $associates,				'commercial' => $commercial,				'crop' => $crop,				'hay' => $hay,				'Range' => $Range,				'recreational' => $recreational,				'live' => $live,				'CookieSet' => $CookieState,				];			$this->view('pages/index', $data);		}		public function getServices()		{			$results = $this->pageModel->getServices();			echo json_encode($results);		}		public function verifyemail($code)		{			$this->pageModel->VerifyEmail($code);			$this->index();		}		public function about()		{			$data =				[					'pageTitle' => 'About',					'title' => 'This is the about page!',					'description' => 'App to share posts with other users!'				];            $this->view('pages/about', $data);		}		public function listings($id)		{			$listingByType = $this->pageModel->getListingByTypes($id);			$mainInfo = $this->pageModel->getMainPageInfo();			$data =				[					'listingbytypes' => $listingByType,					'main' => $mainInfo,					'pageTitle' => 'Listings',					];			$this->view('pages/listings', $data);		}		public function listing($id)		{			$listinginfo = $this->listingModel->getListingInfo($id);			$listingimgs = $this->listingModel->getImages($id);			$mainInfo = $this->pageModel->getMainPageInfo();			$data =				[					'listing_info' => $listinginfo,					'listing_imgs' => $listingimgs,					'main' => $mainInfo,					'pageTitle' => 'ListingPage'				];            $this->view('pages/listing', $data);		}		public function getListingImages($id)		{			if ($_SERVER['REQUEST_METHOD'] == 'POST')			{				$listingid = $_POST['LisitingID'];				$listingimgs = $this->listingModel->getImages($listingid);				echo json_encode($listingimgs);			}		}		public function auctionListingsPage()		{			$auctioninfo = $this->pageModel->getAuctions();			$mainInfo = $this->pageModel->getMainPageInfo();			$data =				[					'main' => $mainInfo,					'auctioninfo' => $auctioninfo,					'pageTitle' => 'Online Auctions',				];			$this->view('pages/auctionListingsPage', $data);		}		public function auctionListing($id)		{			$auctionListingInfo = $this->listingModel->getAuctionInfo($id);			$mainInfo = $this->pageModel->getMainPageInfo();			$bidInfo = $this->listingModel->getCurrentInfo($id);			$currentbid = $this->listingModel->getCurrentBid($id);			$minBid = $this->listingModel->getMinBid($id);			$auctionimgs = $this->listingModel->getAuctionImages($id);			$auctionPDF = $this->listingModel->getTheAuctionPDF($id);			if(isset($_SESSION['user_id']))			{				$activeUser = $this->pageModel->isUserActive($_SESSION['user_id']);				$max_bid = $this->listingModel->GetMaxBid($id, $_SESSION['user_id']);			}			else			{				$activeUser = 0;				$max_bid = 0;			}			$data =				[					'main' => $mainInfo,					'pageTitle' => 'Auction Listing',					'auctionListingInfo' => $auctionListingInfo,					'auctionimgs' => $auctionimgs,					'currentbid' => $currentbid,					'bidInfo' => $bidInfo,					'minBid' => $minBid,					'activeUser' => $activeUser,					'max_bid' => $max_bid,					'auctionPDF' => $auctionPDF,					];			$this->view('pages/auctionListing', $data);		}		public function SetAuctionComplete()		{			if($_SERVER['REQUEST_METHOD'] == 'POST')			{				$id = trim($_POST['AuctionID']);				$this->listingModel->AuctionComplete($id);			}		}		public function GetAuctionStatus()		{			if($_SERVER['REQUEST_METHOD'] == 'POST')			{				$id = trim($_POST['AuctionID']);				$results = $this->listingModel->isAuctionComplete($id);				echo json_encode($results);			}		}		public function emailWinner()		{			if($_SERVER['REQUEST_METHOD'] == 'POST')			{				$id = trim($_POST['AuctionID']);				$winner_email = $this->listingModel->getWinnerEmail($id);				$this->send_messaging->insertEmail('Congratulations!!! - No Reply',$winner_email->email_address, 'info@landmarketers.com', 'You have won'  . "\r\n"  . 'https://www.landmarketers.com/pages/auctionListing/' . $id .					"\r\n"  . 'Please contact Land Marketers' . "\r\n"  . '(402) 336-4444'. "\r\n"  . 'Thank You');			}		}		public function getTheMinBid()		{			if($_SERVER['REQUEST_METHOD'] == 'POST')			{				$id = trim($_POST['AuctionID']);				$results = $this->listingModel->GettingMinBid($id);				echo json_encode($results);			}		}		public function GetSetMinRange()		{			if($_SERVER['REQUEST_METHOD'] == 'POST')			{				$ListPrice = trim($_POST['lastbid']);				$results = $this->listingModel->getSetBid($ListPrice);				echo json_encode($results);			}		}		public function GetSetMinByAcre()		{			if($_SERVER['REQUEST_METHOD'] == 'POST')			{				$id = trim($_POST['AuctionID']);				$results = $this->listingModel->GetMinBidByAcre($id);				echo json_encode($results);			}		}		public function UpdateAuctionDate()		{			if($_SERVER['REQUEST_METHOD'] == 'POST')			{				$id = trim($_POST['AuctionID']);				$newDate = trim($_POST['LastBid']);				$NewDate = trim($_POST['LastBidDay']);				$NewTime = trim($_POST['LastBidTimeMin']);				$this->listingModel->NewAuctionEndTime($id, $NewDate, $NewTime);			}		}		public function GetLastBidInfo()		{			if($_SERVER['REQUEST_METHOD'] == 'POST')			{                $id = trim($_POST['AuctionID']);				$results = $this->listingModel->getCurrentInfo($id);				echo json_encode($results);			}		}		public function GetEndDate()		{			if($_SERVER['REQUEST_METHOD'] == 'POST')			{				$id = trim($_POST['AuctionID']);				$results = $this->listingModel->getAuctionInfo($id);				echo json_encode($results);			}		}		public function getMaxBidRangeByAcre($id)		{		}		public function mpmainview($MPID)		{			if(isset($_SESSION['user_id']))			{				$activeUser = $this->pageModel->isUserActive($_SESSION['user_id']);			}			else			{				$activeUser = 0;			}			$data =				[					'MPID' => $MPID,					'pageTitle' => 'Multi-Parcel Auction',					'activeUser' => $activeUser,				];			$this->view('pages/mpmainview', $data);		}		public function mpacutionpage($PID)		{			if(isset($_SESSION['user_id']))			{				$activeUser = $this->pageModel->isUserActive($_SESSION['user_id']);			}			else			{				$activeUser = 0;			}			$data =				[					'PID' => $PID,					'pageTitle' => 'Multi-Parcel Auction',					'activeUser' => $activeUser,				];			$this->view('pages/mpacutionpage', $data);		}		public function services()		{			$services = $this->pageModel->getServices();			$mainInfo = $this->pageModel->getMainPageInfo();			$data =				[					'services' => $services,					'main' => $mainInfo,					'pageTitle' => 'Services',				];			$this->view('pages/services', $data);		}		public function associates()		{			$associates = $this->pageModel->getAsscoiates();			$mainInfo = $this->pageModel->getMainPageInfo();			$data =				[					'associates' => $associates,					'main' => $mainInfo,					'pageTitle' => 'Associates',				];			$this->view('pages/associates', $data);		}		public function contact()		{			$mainInfo = $this->pageModel->getMainPageInfo();			$associates = $this->pageModel->getAsscoiates();			$data =				[					'pageTitle' => 'Contact',					'associates' => $associates,					'main' => $mainInfo				];			$this->view('pages/contact', $data);		}		public function testimonials()		{			$mainInfo = $this->pageModel->getMainPageInfo();			$testimonials = $this->pageModel->getTestimonals();			$data =				[					'pageTitle' => 'Testimonials',					'testimonials' => $testimonials,					'main' => $mainInfo				];			$this->view('pages/testimonials', $data);		}		public function terms()		{			$mainInfo = $this->pageModel->getMainPageInfo();			$terms = $this->pageModel->getTheTerms();			$data =				[					'pageTitle' => 'Terms and Conditions',					'terms' => $terms,					'main' => $mainInfo				];			$this->view('pages/terms', $data);		}		public function welcome()		{			$this->view('pages/welcome');		}		public function info()		{			$terms = $this->pageModel->getTheTerms();			$data =				[					'pageTitle' => 'Info',					'terms' => $terms,				];			$this->view('pages/info', $data);		}		public function InsertNewContact()		{			$Email = $_POST['EmailAddy'];			$this->pageModel->InsertNewContact($Email);			$results = ['reply' => 'inserted'];			echo json_encode($results);		}	}